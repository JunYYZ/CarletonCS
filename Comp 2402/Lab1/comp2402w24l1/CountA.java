package comp2402w24l1;

// From within the Lab directory (or wherever you put the comp2402w24l1 directory):
// javac comp2402w24l1/CountA.java
// java comp2402w24l1/CountA

// You will submit this file to the autograder.
// It will not pass many of the tests, if any.
// Your task is to modify the countA method to pass the tests.

// Do not add any imports.
// (You shouldn't need any, and you'll fail the autograder if you do.)
import input.InputGenerator;
import input.FileCharGenerator;
import input.AlternatingCharGenerator;
import ods.ArrayDeque;
import ods.ArrayQueue;
import ods.ArrayStack;
import ods.RootishArrayStack;

public class CountA extends RNAStrand {

	public static int countA(InputGenerator<Character> gen, int k) {
		// TODO(student): Your code goes here
		// This is an incorrect implementation.
//		Method Behaviour & Notes
//		Returns the number of A’s in the k ≥ 0 characters preceding the last U in the sequence generated by a given InputGenerator.
//		If there are fewer than k characters preceding the last U, return the number of As in the sequence before the last U.

//		Desired Complexity
//		O(n) time, where n is the number of characters generated. 
//		O(k) space, where k is the integer input parameter.

//        Character[] sequence = new Character[100];
//        int lastUPosition = -1;
//        int index = 0;
//
//        // Store characters in an array and find the index of the last 'U'
//        while (gen.hasNext()) {
//            char c = gen.next();
//            sequence[index] = c;
//
//            if (c == 'U') {
//                lastUPosition = index;
//            }
//
//            index++;
//        }
//
//        // Count the number of 'A's in the k characters before the last 'U'
//        int countA = 0;
//        if (lastUPosition != -1) {
//            int start = Math.max(0, lastUPosition - k);
//            for (int i = start; i < lastUPosition; i++) {
//                if (sequence[i] == 'A') {
//                    countA++;
//                }
//            }
//        }
//
//        return countA;

		// logic flow: store gen into queue because gen is stupid
		// iterate through queue to find last U
		// count A in k nodes before last U

//		if (k==0) {
//			return 0;
//		}
//		ArrayQueue<Character> queue = new ArrayQueue<>();
//		int lastUPosition = -1;
//		int index = 0;
//		int countA = 0;
//		// store characters in a queue and find the position of the last 'U'
//		while (gen.hasNext()) {
//			char c = gen.next();
//			if (c == 'U') {
//				countA = 0;
//				lastUPosition = index;
//				// iterate and count A
//				if (index != 0) {
//					int startIndex = Math.max(0, lastUPosition - k);
//					int i = 0;
//					for (char cc : queue) {
//						if (i >= startIndex && i < lastUPosition) {
//							if (cc == 'A') {
//								countA++;
//							}
//						}
//						i++;
//					}
//				}
//			}
//			if (index >= k) {
//				queue.remove();
//				index--;
//			}
//			queue.add(c);
//			index++;
//
//		} // k = 3 A--A-AUAAUAAAAA
//
//		// edge case check: no u or k = 0
//		if (lastUPosition == -1 || k == 0) {
//			return 0;
//		}
//
//		return countA;

		if (k == 0) {
			return 0;
		}

		ArrayQueue<Character> queue = new ArrayQueue<>();
		int currentCountA = 0;
		int finalCountA = 0;

		while (gen.hasNext()) { //AUCGAUCGAUCG  AUCGAUCGAU
			char c = gen.next();

			// update count
			if (c == 'A') {
				currentCountA++;
			}

			// if U, update a
			if (c == 'U') {
				finalCountA = currentCountA;
			}
			
			// remove if queue full
			if (queue.size() == k) {
				char removedChar = queue.remove();
				if (removedChar == 'A') {
					currentCountA--;
				}
			}

			// enqueue
			queue.add(c);
		}
		
		return finalCountA;

	}

	// These are a few examples of how to use the InputGenerator to run local tests
	// You should test more extensively than this.
	public static void main(String[] args) {
		System.out.println("Testing countA() via CountA.main...");
		System.out.println("You should also try testing via tests/CountATest.java");

		InputGenerator<Character> gen = new FileCharGenerator();

		// The following tests countA using the chars in the
		// file samples/countA-sample.txt, up to the first newline.
		gen = new FileCharGenerator("samples/countA-sample.txt");
		System.out.println();
		System.out.println(countA(gen, 3)); // Expect 0

		// If you want to test via the command-line, i.e. if you want to input a stream
		// of
		// characters of your own devising and then run countA once you hit 'Enter',
		// then
		// uncomment the next three lines.
		// gen = new FileCharGenerator();
		// System.out.println( "Enter a sequence of characters, then hit Enter to run
		// countA(gen, 3):" );
		// System.out.println( "Your result is: " + countA(gen, 3) );

		// The following tests use a generate that alternates between the characters
		// listed in the
		// options array. The second argument is the number of characters to generate.
		char[] options = { 'A', 'U', 'C', 'G' };
		gen = new AlternatingCharGenerator(options, 12); // Generates AUCGAUCGAUCG
		System.out.println();
		System.out.println(countA(gen, 4)); // Expect 1

		gen = new AlternatingCharGenerator(options, 10, true); // Generates AUCGAUCGAU -- uses true to store what was
		System.out.println(); // generated
		System.out.println(countA(gen, 9)); // Expect 3

		gen = new AlternatingCharGenerator(options, 11, true); // Generates AUCGAUCGAUC -- uses true to store what was
		System.out.println(); // generated
		System.out.println(countA(gen, 3)); // Expect 1

		gen = new AlternatingCharGenerator(options, 11, true); // Generates AUCGAUCGAUC -- uses true to store what was
		System.out.println(); // generated
		System.out.println(countA(gen, 1)); // Expect 1

	}

}
