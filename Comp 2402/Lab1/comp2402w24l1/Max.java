package comp2402w24l1;

// From within the Lab directory (or wherever you put the comp2402w24l1 directory):
// javac comp2402w24l1/Max.java
// java comp2402w24l1/Max

// You will submit this file to the autograder.
// It will not pass many of the tests, if any.
// Your task is to modify the max method to pass the tests.

// Do not add any imports.
// (You shouldn't need any, and you'll fail the autograder if you do.)
import input.InputGenerator;
import input.FileCharGenerator;
import input.AlternatingCharGenerator;
import ods.ArrayDeque;
import ods.ArrayQueue;
import ods.ArrayStack;
import ods.RootishArrayStack;

public class Max extends RNAStrand {

	public static int max(InputGenerator<Character> gen) {
		// TODO(student): Your code goes here
		// The current implementation is incorrect.
//         while( gen.hasNext() ) { // This loop is just to read in the input from gen
//            Character c = gen.next();
//        }
//        return -1; 
//		int[] possibleChars = new int[128];
//		int maxCount = 0;
//
//		while (gen.hasNext()) {
//			char cChar = gen.next();
// 
//			possibleChars[cChar] += 1;
//
//			maxCount = Math.max(maxCount, possibleChars[cChar]);
//		}

		//hard coding :( but I guess RNA won't change so its okay
		int countA = 0;
		int countC = 0;
		int countG = 0;
		int countU = 0;

		while (gen.hasNext()) {
			char currentChar = gen.next();

			// Uupdate counts based on the current character
			switch (currentChar) {
			case 'A':
				countA++;
				break;
			case 'U':
				countU++;
				break;
			case 'C':
				countC++;
				break;
			case 'G':
				countG++;
				break;
			default:
				throw new IllegalArgumentException("Invalid character: " + currentChar);
			}
		}

		// find max
		return Math.max(countA, Math.max(countU, Math.max(countC, countG)));
	}

	// These are a few examples of how to use the InputGenerator to run local tests
	// You should test more extensively than this.
	public static void main(String[] args) {
		System.out.println("Testing max() via Max.main...");
		System.out.println("You should also try testing via tests/MaxTest.java");

		InputGenerator<Character> gen = new FileCharGenerator();

		// The following tests max using the chars in the
		// file samples/max-sample.txt, up to the first newline.
		gen = new FileCharGenerator("samples/max-sample.txt");
		System.out.println(max(gen)); // Expect 4

		// If you want to test via the command-line, i.e. if you want to input a stream
		// of
		// characters of your own devising and then run max once you hit 'Enter', then
		// uncomment the next three lines.
		// gen = new FileCharGenerator();
		// System.out.println( "Enter a sequence of characters, then hit Enter to run
		// max(gen):" );
		// System.out.println( "Your result is: " + max(gen) );

		// The following tests use a generate that alternates between the characters
		// listed in the
		// options array. The second argument is the number of characters to generate.
		char[] options = { 'A', 'U', 'C', 'G' };
		gen = new AlternatingCharGenerator(options, 12); // Generates AUCGAUCGAUCG AAAUUUCCCGGG
		System.out.println(max(gen)); // Expect 3
		gen = new AlternatingCharGenerator(options, 10); // Generates AUCGAUCGAU
		System.out.println(max(gen)); // Expect 3
		gen = new AlternatingCharGenerator(options, 11, true); // Generates AUCGAUCGAUC -- uses true to store what was
																// generated
		System.out.println(max(gen)); // Expect 3
		System.out.println(gen); // This is how you can access the characters generated by the generator
	}

}
