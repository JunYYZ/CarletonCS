package comp2402w24l0;

// From within the Lab directory (or wherever you put the comp2402w24l0 directory):
// javac comp2402w24l0/ContainsA.java
// java comp2402w24l0/ContainsA

// You will submit this file to the autograder.
// It will pass all *correctness* tests as-is.
// But it will fail the time- and space-complexity tests.
// Your task is to modify the containsA method to pass the complexity tests.

// Do not add any imports.
// (You shouldn't need any, and you'll fail the autograder if you do.)
import input.InputGenerator;
import input.FileCharGenerator;
import input.AlternatingCharGenerator;
import ods.ArrayStack;

/**
 * This class is used to determine whether a given input generator contains the
 * character 'A'.
 */
public class ContainsA {

	/**
	 * Return true if the input generator contains the character 'A' See the Lab 0
	 * specifications for more details about the InputGenerator.
	 * 
	 * @param gen
	 */
	public static boolean containsA(InputGenerator<Character> gen) {
		boolean containsA = false; // Whether we've seen an A yet.
		// Read in the input one character at a time.
		while (gen.hasNext()) { // While there are still characters to read // Add the character to the
								// arraystack list
			if (gen.next() == 'A') { // Found one!
				containsA = true;
				return containsA;
			}
		}

		return containsA;
	}

	// These are a few examples of how to use the InputGenerator to run local tests
	// You should test more extensively than this.
	public static void main(String[] args) {
		System.out.println("Testing containsA() via ContainsA.main...");
		System.out.println("You should also try testing via test/ContainsATest.java");

		InputGenerator<Character> gen;

		// The following tests containsA using the chars in the
		// file samples/containsA-sample.txt, up to the first newline.
		gen = new FileCharGenerator("samples/containsA-sample.txt");
		System.out.println(containsA(gen)); // Expect true

		// If you want to test via the command-line, i.e. if you want to input a stream
		// of
		// characters of your own devising and then run containsA once you hit 'Enter',
		// then
		// uncomment the next two lines.
		// gen = new FileCharGenerator();
		// System.out.println( containsA(gen) ); // Uncomment this if you want to test
		// with the command line

		// The following tests use a generate that alternates between the characters
		// listed in the
		// options array. The second argument is the number of characters to generate.
		char[] options = { 'U', 'C', 'G', 'A' };
		gen = new AlternatingCharGenerator(options, 12); // Generates UCGAUCGAUCGA
		System.out.println(containsA(gen)); // Expect true
		options = new char[] { 'U', 'C', 'G' };
		gen = new AlternatingCharGenerator(options, 12, true); // Generates UCGUCGUCGUCG -- uses true to store what was
																// generated
		System.out.println(containsA(gen)); // Expect false
		System.out.println(gen); // This is how you can access the characters generated by the generator

	}

}
