package comp2402w24l1;

// From within the Lab directory (or wherever you put the comp2402w24l1 directory):
// javac comp2402w24l1/Bond.java
// java comp2402w24l1/Bond

// You will submit this file to the autograder.
// It will not pass many of the tests, if any.
// Your task is to modify the bond method to pass the tests.

// Do not add any imports.
// (You shouldn't need any, and you'll fail the autograder if you do.)
import input.InputGenerator;
import input.FileCharGenerator;
import input.AlternatingCharGenerator;
import ods.ArrayDeque;
import ods.ArrayQueue;
import ods.ArrayStack;
import ods.RootishArrayStack;

public class Bond extends RNAStrand {

	public static boolean bond(InputGenerator<Character> gen) {
//        // TODO(student): Your code goes here
//        // The current implementation is incorrect
		ArrayStack<Character> charStack = new ArrayStack<>();
		ArrayStack<Integer> indexStack = new ArrayStack<>();
		Character c;
		int index = 0;

		while (gen.hasNext()) { // if nexet
			c = gen.next();
			
			if (c.equals('A') || c.equals('C')) {
				charStack.add(c);
				indexStack.add(index);
			} else if (c.equals('U')) {
				if (charStack.isEmpty() || !charStack.get(charStack.size() - 1).equals('A')) {
					return false; // wrong pairing
				}
				charStack.remove(charStack.size() - 1);
				indexStack.remove(indexStack.size() - 1);
			} else if (c.equals('G')) {
				if (charStack.isEmpty() || !charStack.get(charStack.size() - 1).equals('C')) {
					return false; // wrong pairing
				}
				charStack.remove(charStack.size() - 1);
				indexStack.remove(indexStack.size() - 1);
			} else {
				// exist invalid character
				return false;
			}
			index++;
		}

		// if not empyy, exists unpaired
		return charStack.isEmpty();
	}

	// This method translates true/false to "has property"/"does not have property".
	private static void printResult(boolean result, InputGenerator<Character> gen) {
		System.out.print("\t");
		if (result) {
			System.out.println(gen + " Has Property");
		} else {
			System.out.println(gen + " Does not have Property");
		}
	}

	// These are a few examples of how to use the InputGenerator to run local tests
	// You should test more extensively than this.
	public static void main(String[] args) {
		System.out.println("Testing bond() via Bond.main...");
		System.out.println("You should also try testing via tests/BondTest.java");

		InputGenerator<Character> gen = new FileCharGenerator();

		// The following tests bond using the chars in the
		// file samples/bond-sample.txt, up to the first newline.
		System.out.println("== starting test ==");
		gen = new FileCharGenerator("samples/bond-sample.txt");
		System.out.println(gen);
		printResult(bond(gen), gen); // Expect true

		// If you want to test via the command-line, i.e. if you want to input a stream
		// of
		// characters of your own devising and then run bond once you hit 'Enter', then
		// uncomment the next three lines.
		// gen = new FileCharGenerator();
		// System.out.println( "Enter a sequence of characters, then hit Enter to run
		// bond(gen):" );
		// System.out.println( "Your result is: " + bond(gen) );

		char[] options = { 'A', 'U', 'C', 'G' };
		gen = new AlternatingCharGenerator(options, 12); // Generates AUCGAUCGAUCG
		System.out.println(gen);
		printResult(bond(gen), gen); // Expect true

		gen = new AlternatingCharGenerator(options, 10, true); // Generates AUCGAUCGAU -- uses true to store what was
		System.out.println(gen); // generated
		printResult(bond(gen), gen); // Expect true

		gen = new AlternatingCharGenerator(options, 11, true); // Generates AUCGAUCGAUC -- uses true to store what was
		System.out.println(gen); // generated
		printResult(bond(gen), gen); // Expect false

		System.out.println(gen); // This is how you can access the characters generated by the generator
	}

}
