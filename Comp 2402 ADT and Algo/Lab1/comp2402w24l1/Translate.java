package comp2402w24l1;

// From within the Lab directory (or wherever you put the comp2402w24l1 directory):
// javac comp2402w24l1/Translate.java
// java comp2402w24l1/Translate

// You will submit this file to the autograder.
// It will not pass many of the tests, if any.
// Your task is to modify the translate method to pass the tests.

// Do not add any imports.
// (You shouldn't need any, and you'll fail the autograder if you do.)
import input.InputGenerator;
import input.FileCharGenerator;
import input.AlternatingCharGenerator;
import ods.ArrayDeque;
import ods.ArrayQueue;
import ods.ArrayStack;
import ods.RootishArrayStack;

public class Translate extends RNAStrand {

	public static int translate(InputGenerator<Character> gen) {
//		Method Behaviour & Notes
//		Returns the length of the input sequence generated by InputGenerator<Character> gen after it has been translated as follows:
//		If an A is generated, 
//		If the current translation length is even, append XYZ to the end of the translation.
//		Otherwise, append XYZ to the front of the translation.
//		If a U is generated,
//		If the first character of the translation is currently an M, remove the first two characters of the translation.
//		Otherwise, remove the last character of the translation.
//		If a C is generated,
//		If the current translation length is even, append MN to the front of the translation.
//		Otherwise, append MN to the end of the translation.
//		If a G is generated:
//		If the last character of the translation is a Z, remove it from the translation.
//		Otherwise, remove the first two characters from the translation.
//		If you ever attempt to remove a character from an empty translation, return -1.
//		Otherwise return the length of the constructed strand.

//		Desired Complexity
//		O(n) time, where n is the number of characters generated 
//		O(p) space, where p is the length of the longest translation constructed from any prefix.
		ArrayDeque<Character> translation = new ArrayDeque<>();

		while (gen.hasNext()) {
			Character c = gen.next();

			switch (c) {
			case 'A':
				if (translation.size() % 2 == 0) { // even
					translation.add(translation.size(), 'X');
					translation.add(translation.size(), 'Y');
					translation.add(translation.size(), 'Z');
				} else { // odd
					translation.add(0, 'X');
					translation.add(0, 'Y');
					translation.add(0, 'Z');
				}
				break;
			case 'U':
				if (translation.size() == 0)
					return -1;
				if (translation.get(0) == 'M') {
					if (translation.size() < 2)
						return -1;
					translation.remove(0);
					translation.remove(0);
				} else {
					translation.remove(translation.size() - 1);
				}
				break;
			case 'C':
				if (translation.size() % 2 == 0) { // eben
					translation.add(0, 'M');
					translation.add(1, 'N');
				} else { // odd
					translation.add(translation.size(), 'M');
					translation.add(translation.size(), 'N');
				}
				break;
			case 'G':
				if (translation.size() == 0)
					return -1;
				if (translation.get(translation.size() - 1) == 'Z') {
					translation.remove(translation.size() - 1);
				} else {
					if (translation.size() < 2)
						return -1;
					translation.remove(0);
					translation.remove(0);
				}
				break;
			}
		}

		return translation.size();
	}

	// These are a few examples of how to use the InputGenerator to run local tests
	// You should test more extensively than this.
	public static void main(String[] args) {
		System.out.println("Testing translate() via Translate.main...");
		System.out.println("You should also try testing via tests/TranslateTest.java");

		InputGenerator<Character> gen = new FileCharGenerator();

		// The following tests bond using the chars in the
		// file samples/translate-sample.txt, up to the first newline.
		gen = new FileCharGenerator("samples/translate-sample.txt");
		System.out.println(translate(gen)); // Expect -1

		// If you want to test via the command-line, i.e. if you want to input a stream
		// of
		// characters of your own devising and then run translate once you hit 'Enter',
		// then
		// uncomment the next three lines.
		// gen = new FileCharGenerator();
		// System.out.println( "Enter a sequence of characters, then hit Enter to run
		// translate(gen):" );
		// System.out.println( "Your result is: " + translate(gen) );

		char[] options = { 'A', 'U', 'C', 'G' };
		gen = new AlternatingCharGenerator(options, 1); // Generates A
		System.out.println(translate(gen)); // Expect 3 -- XYZ
		gen = new AlternatingCharGenerator(options, 2); // Generates AU
		System.out.println(translate(gen)); // Expect 2 -- XY
		gen = new AlternatingCharGenerator(options, 3); // Generates AUC
		System.out.println(translate(gen)); // Expect 4 -- MNXY
		gen = new AlternatingCharGenerator(options, 4); // Generates AUCG
		System.out.println(translate(gen)); // Expect 2 -- XY
		gen = new AlternatingCharGenerator(options, 5); // Generates AUCGA
		System.out.println(translate(gen)); // Expect 5 -- XYXYZ
		gen = new AlternatingCharGenerator(options, 6); // Generates AUCGAU
		System.out.println(translate(gen)); // Expect 4 -- XYXY
		gen = new AlternatingCharGenerator(options, 7); // Generates AUCGAUC
		System.out.println(translate(gen)); // Expect 6 -- MNXYXY
		gen = new AlternatingCharGenerator(options, 8); // Generates AUCGAUCG
		System.out.println(translate(gen)); // Expect 4 -- XYXY
		gen = new AlternatingCharGenerator(options, 10); // Generates AUCGAUCGAU
		System.out.println(translate(gen)); // Expect 6 -- XYXYXY
		gen = new AlternatingCharGenerator(options, 11); // Generates AUCGAUCGAUC
		System.out.println(translate(gen)); // Expect 8 -- MNXYXYXY
		gen = new AlternatingCharGenerator(options, 12, true); // Generates AUCGAUCGAUCG -- uses true to store what was
																// generated
		System.out.println(translate(gen)); // Expect 6 -- XYXYXY
		System.out.println(gen); // This is how you can access the characters generated by the generator
	}

}
