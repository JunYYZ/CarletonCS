package comp2402w24l5;

// From within the Lab directory (or wherever you put the comp2402w24l5 directory):
// javac comp2402w24l5/Bond.java
// java comp2402w24l5/Bond

// You will submit this file to the autograder.
// It will not pass many of the tests, if any.
// Your task is to modify the bond method to pass the tests.

// Do not add any imports.
// (You shouldn't need any, and you'll fail the autograder if you do.)
import input.InputGenerator;
import input.FileCharGenerator;
import input.AlternatingCharGenerator;

import comp2402w24l5.RNAStrand;
import java.util.Arrays;

public class Bond {

	public static int bond(InputGenerator<Character> gen) {

		if (!gen.hasNext()) {
			return 0;
		}

		StringBuilder sb = new StringBuilder();
		
		while (gen.hasNext()) {
			sb.append(gen.next());
		}

		int n = sb.length();
		if (n <= 4) {
			return 0;
		}

		int[][] dp = new int[n][n];

		for (int len = 5; len <= n; len++) {
			for (int i = 0; i <= n - len; i++) {
				int j = i + len - 1;
				for (int k = i; k < j - 4; k++) {
					if (isPair(sb.charAt(k), sb.charAt(j))) {

						int lBonds = (k - 1 >= i) ? dp[i][k - 1] : 0;
						int rBonds = (k + 1 <= j - 1) ? dp[k + 1][j - 1] : 0;
						int bCount = 1 + lBonds + rBonds;
						dp[i][j] = Math.max(dp[i][j], bCount);
					}
				}
				dp[i][j] = Math.max(dp[i][j], dp[i][j - 1]);
			}
		}

		return dp[0][n - 1];
	}

	private static boolean isPair(char x, char y) {
		return (x == 'A' && y == 'U') || (x == 'U' && y == 'A') || (x == 'C' && y == 'G') || (x == 'G' && y == 'C');
	}

	// These are a few examples of how to use the InputGenerator to run local tests
	// You should test more extensively than this.
	public static void main(String[] args) {
		System.out.println("Testing bond() via Bond.main...");
		System.out.println("You should also try testing via tests/BondTest.java");

		InputGenerator<Character> gen = new FileCharGenerator();

		// The following tests bond using the chars in the
		// file samples/bond-sample.txt, up to the first newline.
		gen = new FileCharGenerator("Lab5/samples/bond-sample.txt");
		System.out.println("Expect 2: " + bond(gen)); // Expect 2 (A-U, A-U) at bonds (0,7), (1,6)

		// If you want to test via the command-line, i.e. if you want to input a stream
		// of
		// characters of your own devising and then run bond once you hit 'Enter', then
		// uncomment the next three lines.
		// gen = new FileCharGenerator();
		// System.out.println( "Enter a sequence of characters, then hit Enter to run
		// bond(gen):" );
		// System.out.println( "Your result is: " + bond(gen) );

		char[] options = { 'A', 'U', 'C', 'G' };
		gen = new AlternatingCharGenerator(options, 5); // Generates AUCGAU
		System.out.println("Expect 0: " + bond(gen));

		gen = new AlternatingCharGenerator(options, 6); // Generates AUCGAU
		System.out.println("Expect 1: " + bond(gen)); // (0,5)

		gen = new AlternatingCharGenerator(options, 8); // Generates AUCGAUCG
		System.out.println("Expect 1: " + bond(gen)); // (2,7)

		gen = new AlternatingCharGenerator(options, 12); // Generates AUCGAUCGAUCG
		System.out.println("Expect 3: " + bond(gen)); // (2,11), (3,10), (4,9)

		gen = new AlternatingCharGenerator(options, 14, true); // Generates AUCGAUCGAUCGAU
		System.out.println("Expect 5: " + bond(gen)); // (0,13), (1,12), (2,11), (3,10), (4,9)

		gen = new AlternatingCharGenerator(options, 16, true); // Generates AUCGAUCAUCGAUCG
		System.out.println("Expect 5: " + bond(gen)); // (2,15), (3,14), (4,13), (5,12), (6,11) OR (0,13), (1,12),
														// (2,11), (3,10), (4,9)
		System.out.println(gen); // This is how you can access the characters generated by the generator

		gen = new AlternatingCharGenerator(options, 0, true); // Generates nothing
		System.out.println("Expect 0: " + bond(gen));

		String seq = "ACCCCUUCCCCA";
		gen = new AlternatingCharGenerator(seq.toCharArray(), 12);
		System.out.println("Expect 2: " + bond(gen)); // (0,5), (6,11)

		seq = "ACCCCUUUCCCCAA";
		gen = new AlternatingCharGenerator(seq.toCharArray(), 14);
		System.out.println("Expect 3: " + bond(gen)); // (0,5), (6,13), (7, 12)

		seq = "GUCGAUUGAGCGAAUGUAACAACGUCGCUACGGCGAGA";
		gen = new AlternatingCharGenerator(seq.toCharArray(), 38);
		System.out.println("Expect 12: " + bond(gen));
	}

}
