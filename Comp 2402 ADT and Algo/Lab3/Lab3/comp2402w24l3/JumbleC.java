package comp2402w24l3;

// From within the Lab directory (or wherever you put the comp2402w24l3 directory):
// javac comp2402w24l3/JumbleC.java
// java comp2402w24l3/JumbleC

// You will submit this file to the autograder.
// It will not pass many of the tests, if any.
// Your task is to modify the jumble method to pass the tests.

// Do not add any imports.
// (You shouldn't need any, and you'll fail the autograder if you do.)
import input.InputGenerator;
import input.FileCharGenerator;
import input.AlternatingCharGenerator;
import ods.ArrayDeque;
import ods.ArrayQueue;
import ods.ArrayStack;
import ods.RootishArrayStack;
import ods.SLList;
import ods.DLList;
import ods.SEList;
import ods.SkiplistList;
import ods.SkiplistSSet;
import ods.BinaryTree;
import ods.BinarySearchTree;
import ods.Treap;
import ods.ScapegoatTree;
import ods.SSet;

import java.util.ListIterator;
import java.util.Iterator;

public class JumbleC extends Jumble {

	/**
	 * Returns a jumbled version of the input sequence generated by
	 * InputGenerator<Character> gen after it has been jumbled as follows: 1.
	 * Initially the cursor is at index 0. 2. As characters are generated, add them
	 * at the cursor. 3. If an AUC is generated, rewind the cursor floor(n/2)
	 * positions, where n is the number of characters generated thus far, or to 0 if
	 * this would move the cursor left of 0. 4. If an AUG is generated, fast forward
	 * the cursor floor(n/4) positions, where n is the number of characters
	 * generated thus far, or to n if this would move the cursor right of n.
	 */
	public String jumble(InputGenerator<Character> gen) {
		// same logic as jumble A but using skiplist
		SkiplistList<Character> charList = new SkiplistList<>();
		int cursor = 0;

		char c1 = '\0', c2 = '\0';

		while (gen.hasNext()) {
			char current = gen.next();
			charList.add(cursor++, current);

			if (c2 == 'A' && c1 == 'U') {
				if (current == 'C') {
					// rewind
					cursor = Math.max(0, cursor - charList.size() / 2);
				} else if (current == 'G') {
					// ff
					cursor = Math.min(charList.size(), cursor + charList.size() / 4);
				}
			}
			c2 = c1;
			c1 = current;
		}

		StringBuilder sb = new StringBuilder(charList.size());
		for (char ch : charList) {
			sb.append(ch);
		}
		return sb.toString();
	}

//	// These are a few examples of how to use the InputGenerator to run local tests
//	// You should test more extensively than this.
//	public static void main(String[] args) {
//		System.out.println("Testing jumble() via JumbleC.main...");
//		System.out.println("You should also try testing via tests/JumbleCTest.java");
//
//		Jumble jum = new JumbleC();
//		InputGenerator<Character> gen = new FileCharGenerator();
//
//		// The following tests jumbleC using the chars in the
//		// file samples/jumble-sample.txt, up to the first newline.
//		gen = new FileCharGenerator("Lab3/samples/jumble-sample.txt");
//		System.out.println(jum.jumble(gen)); // Expect AUCUAAUCAUCUC
//
//		// If you want to test via the command-line, i.e. if you want to input a stream
//		// of
//		// characters of your own devising and then run jumble once you hit 'Enter',
//		// then
//		// uncomment the next three lines.
//		// gen = new FileCharGenerator();
//		// System.out.println( "Enter a sequence of characters, then hit Enter to run
//		// jumble(gen):" );
//		// System.out.println( "Your result is: " + jum.jumble(gen) );
//
//		System.out.println("\nTesting Rewind Only...");
//
//		char[] options = { 'A', 'U', 'C', 'G' };
//		gen = new AlternatingCharGenerator(options, 4); // Generates AUCG
//		System.out.println(jum.jumble(gen)); // Expect AUGC
//
//		gen = new AlternatingCharGenerator(options, 5); // Generates AUCGA
//		System.out.println(jum.jumble(gen)); // Expect AUGAC
//
//		gen = new AlternatingCharGenerator(options, 6); // Generates AUCGA
//		System.out.println(jum.jumble(gen)); // Expect AUGAUC
//
//		gen = new AlternatingCharGenerator(options, 7); // Generates AUCGAUC
//		System.out.println(jum.jumble(gen)); // Expect AUGAUCC
//
//		gen = new AlternatingCharGenerator(options, 8); // Generates AUCGAUCG
//		System.out.println(jum.jumble(gen)); // Expect AUGGAUCC
//
//		gen = new AlternatingCharGenerator(options, 12);
//		System.out.println(jum.jumble(gen)); // Expect AUGGGAUCAUCC
//
//		gen = new AlternatingCharGenerator(options, 16);
//		System.out.println(jum.jumble(gen)); // Expect GAUGAUCGGAUCAUCC
//
//		gen = new AlternatingCharGenerator(options, 20);
//		System.out.println(jum.jumble(gen)); // Expect GGAUCAUGAUCGGAUCAUCC
//
//		System.out.println("\nTesting FF Only...");
//		options = new char[] { 'A', 'U', 'G', 'C' };
//		gen = new AlternatingCharGenerator(options, 4); // Generates AUGC
//		System.out.println(jum.jumble(gen)); // Expect AUGC
//
//		gen = new AlternatingCharGenerator(options, 5); // Generates AUGCA
//		System.out.println(jum.jumble(gen)); // Expect AUGCA
//
//		gen = new AlternatingCharGenerator(options, 6); // Generates AUGCA
//		System.out.println(jum.jumble(gen)); // Expect AUGCAU
//
//		System.out.println("\nTesting Rew/FF Alternating...");
//		options = new char[] { 'A', 'U', 'C', 'G', 'A', 'U', 'G', 'C' };
//		gen = new AlternatingCharGenerator(options, 8); // Generates AUCGAUGC
//		System.out.println(jum.jumble(gen)); // Expect AUGAUGCC
//
//		gen = new AlternatingCharGenerator(options, 12); // Generates AUCGAUGCAUCG
//		System.out.println(jum.jumble(gen)); // Expect AUGAUGGCCAUC
//
//		gen = new AlternatingCharGenerator(options, 13); // Generates AUCGAUGCAUCGA
//		System.out.println(jum.jumble(gen)); // Expect AUGAUGGACCAUC
//
//		gen = new AlternatingCharGenerator(options, 16); // Generates AUCGAUGCAUCGAUGC
//		System.out.println(jum.jumble(gen)); // Expect AUGAUGGAUGCCACUC
//
//		// Extra test, shows you how to make an array from a String, if helpful.
//		String s = "ACCGAACGGUAC";
//		options = s.toCharArray();
//		gen = new AlternatingCharGenerator(options, options.length); // Generates AUCGAUGCAUCGAUGC
//		System.out.println(jum.jumble(gen));
//
//		s = "CAUCAUGA";
//		options = s.toCharArray();
//		gen = new AlternatingCharGenerator(options, options.length); // Generates AUCGAUGCAUCGAUGC
//		System.out.println(jum.jumble(gen));
//
//	}

}
